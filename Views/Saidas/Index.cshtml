@using PDV_Consultor.Models
@model IEnumerable<PDV_Consultor.Models.Saida>

@{
    ViewData["Title"] = "Saída de estoque";
    DateTime? startDate = ViewData["StartDate"] as DateTime?;
    DateTime? endDate = ViewData["EndDate"] as DateTime?;
}

<h1>Saída de estoque</h1>


<p>
    <button class="btn btn-primary" onclick="location.href='@Url.Action("Create")'">Registrar nova venda</button>
</p>


<form asp-action="Index" method="get">
    <div class="form-row">
        <div class="">
            <label for="startDate">Data inicial:</label>
            <input type="date" id="startDate" name="startDate" class="form-control-inline" />
        </div>
        <br />
        <div class="">
            <label for="endDate">Data final:</label>
            <input type="date" id="endDate" name="endDate" class="form-control-inline" />
        </div>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Filtrar data</button>
</form>

<br/>
<div>
    @if (startDate.HasValue && endDate.HasValue)
    {
        <p>Exibindo resultados para o período de @startDate.Value.ToShortDateString() a @endDate.Value.ToShortDateString()</p>
    }
    else
    {
        <p>Exibindo todos os resultados</p>
    }
</div>
<br/>

<!-- Tabela de Resumo -->
@if (ViewData["Produtos"] != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome do Produto</th>
                <th>Quantidade</th>
                <th>Valor Total</th>
                <th>Lucro</th>
            </tr>
        </thead>
        <tbody>
            @{
                var produtos = (IEnumerable<ProdutoItem>)ViewData["Produtos"];
                var groupedData = Model.GroupBy(item => produtos.FirstOrDefault(p => p.SerialNumber == item.SerialNumber)?.Produto?.Nome);
            }

            @foreach (var group in groupedData)
            {
                var nomeProduto = group.Key;
                var quantidadeProduto = group.Count();
                var valorTotalProduto = group.Sum(item => item.Preco);

                // Obtém os dados do ProdutoItem correspondente
                var produtoItem = produtos.FirstOrDefault(p => p.Produto?.Nome == nomeProduto);

                // Calcula o lucro
                var lucroProduto = valorTotalProduto - (quantidadeProduto * (produtoItem?.Preco ?? 0));

                <tr>
                    <td>@nomeProduto</td>
                    <td>@quantidadeProduto</td>
                    <td>@valorTotalProduto.ToString("C")</td>
                    <td>@lucroProduto.ToString("C")</td>
                </tr>
            }

            <tr>
                <td><strong>Total Geral</strong></td>
                <td><strong>@Model.Count()</strong></td>
                <td><strong>@Model.Sum(item => item.Preco).ToString("C")</strong></td>
                <td><strong>@Model.Sum(item => CalculateLucro(item)).ToString("C")</strong></td>
            </tr>

            <tr>
                <td><strong>Clientes Novos</strong></td>
                <td><strong>@Model.Count(item => item.ClienteNovo)</strong></td>
                <td colspan="2"></td>
            </tr>
        </tbody>
    </table>
}
else
{
    <p>Não há dados para exibir.</p>
}



@functions {
    // Função para calcular o lucro de um item
    decimal CalculateLucro(Saida item)
    {
        var produtoItem = ((IEnumerable<ProdutoItem>)ViewData["Produtos"])
            .FirstOrDefault(p => p.SerialNumber == item.SerialNumber);

        return (item.Preco - produtoItem?.Preco) ?? 0;
    }
}

<br/>


<!-- Tabela de Vendas -->
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ProdutoItem.Produto.Nome)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SerialNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DataSaida)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NomeCliente)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClienteNovo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Troca)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Preco)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @{
                        var produtoItem = ((IEnumerable<ProdutoItem>)ViewData["Produtos"])
                        .FirstOrDefault(p => p.SerialNumber == item.SerialNumber);
                        var nomeProduto = produtoItem?.Produto.Nome ?? "Desconhecido";
                    }
                    @nomeProduto
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SerialNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DataSaida)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NomeCliente)
                </td>
                <td>
                    @if (item.ClienteNovo)
                    {
                        <p>Sim</p>
                    }
                    else
                    {
                        <p>Não</p>
                    }
                </td>
                <td>
                    @if (item.Troca)
                    {
                        <p>Sim</p>
                    }
                    else
                    {
                        <p>Não</p>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Preco)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
